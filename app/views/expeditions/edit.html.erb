<style>
#map {
  height: 500px;
  width: 100%;
}
#startLocate {
  float: left;
}
#stopLocate{
  float: right;
}
</style>

<%= button_tag "Start Geolocation", id: "startLocate" %>
<%= button_tag "Stop Geolocation", id: "stopLocate" %>

<div id="map"></div>
<hr>
<br>
<p>Latitude: <span id="latitude"></span></p>
<p>Longitude: <span id="longitude"></span></p>
<p>Accuracy: <span id="accuracy"></span></p>
<p>Heading: <span id="compass"></span>Â°</p>
<p>Distance Travelled: <span id="distance"></span>m</p>
<br>


<%= form_for @expedition, html: {id: "submitTitle"}, remote: true, method: :patch do |f| %>
  <%= f.label :title %><br>
  <%= f.text_area :title %><br>
  <%= f.submit %>
<% end %>
<br>
<%= form_for @expedition, html: {id: "submitDescription"}, remote: true, method: :patch do |f| %>
  <%= f.label :desciption %><br>
  <%= f.text_area :description %><br>
  <%= f.submit %>
<% end %>
<br>
<%= form_for [@expedition, @annotation], html: {id: "submitImage"}, remote: true, method: :post do |f| %>
  <%= f.label "Upload an Image" %><br>
  <%= f.file_field :image %><br>
  <%= f.submit "Add Image" %>
<% end %>
<br>
<%= form_for [@expedition, @annotation], html: {id: "submitRecording"}, remote: true, method: :post do |f| %>
  <%= f.label "Upload a Recording" %><br>
  <%= f.file_field :recording %><br>
  <%= f.submit "Add Recording" %>
<% end %>

<script src="/assets/fulltilt-min.js"></script>

<script>

// Perhaps we sort out coordinates in the controller, maybe a coordinate has an incrementing value for each time you return to the page
// Maybe they hold an id of some kind which references the previous batch? Maybe this is a new model?
// Build out a new polyline for each batch of coordinates
// Key on side with start/finish 
var previousCoordinates = [<% @expedition.coordinates.each do |coordinate| %><%= "{id: #{coordinate.id}, latitude: #{coordinate.latitude}, longitude: #{coordinate.longitude}}," %><% end %>]

var map;
var poly;
var path;
var heading;
var startMarker;
var marker;
var contentMarker;
var infoWindow;
var lastInfoWindow;
var infoWindowClosed;
var infoWindowClosed = true;

function initMap() {
  var compassSpan = document.getElementById("compass");
  heading = 0.0;
  // Obtain a new *world-oriented* Full Tilt JS DeviceOrientation Promise
  var promise = FULLTILT.getDeviceOrientation({ type: 'world'  });

  // Wait for Promise result
  promise.then(function(deviceOrientation) {
    // Apparently device orientation events are supported, so register a callback
    deviceOrientation.listen(function() {
      // Get the current *screen-adjusted* device orientation angles
      var currentOrientation = deviceOrientation.getScreenAdjustedEuler();
      console.log(currentOrientation);
      // Calculate the current compass heading that the user is facing (in degrees)
      heading = 360 - currentOrientation.alpha;
      compassSpan.innerHTML = heading.toString();
    });
  }).catch(function(errorMessage) {
    // Device Orientation Events are not supported
    console.log(errorMessage);
  });
  map = new google.maps.Map(document.getElementById('map'), {
    minZoom: 3,
    zoom: 16,
    mapTypeId: 'satellite'
  });
  startMarker = new google.maps.Marker({
    map: map,
    draggable: false
  });
  marker = new google.maps.Marker({
    map: map,
    draggable: false
  });
  dropMarker = new google.maps.Marker({
    map: map,
    draggable: false,
    animation: google.maps.Animation.DROP
  });
  map.addListener('click', function (e) {
    dropMarker.setVisible(true);
    dropMarker.setPosition(e.latLng);
  });
  poly = new google.maps.Polyline({
    strokeColor: '#009900',
    strokeOpacity: 1.0,
    strokeWeight: 3
  });
  poly.setMap(map);
  path = poly.getPath();
}
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCgPKDNnR376aeoPLyafsvnJs_EcpDtPV8&callback=initMap" async defer>
</script>

<script>
window.onload = function () {
  var csrf = $('meta[name=csrf-token]').attr('content');
  var timer;
  function locate () {
    var geo = navigator.geolocation;
    if (geo) {
      geo.getCurrentPosition(function (data) {
        latLng = new google.maps.LatLng(data.coords.latitude, data.coords.longitude);
        if (path.b.length == 0) {
          startMarker.setPosition(latLng);
        }
        map.setCenter(latLng);
        marker.setPosition(latLng);
        $('#latitude').html(data.coords.latitude.toString());
        $('#longitude').html(data.coords.longitude.toString());
        $('#accuracy').html(data.coords.accuracy.toString());
        App.coordinates.create({
          coordinate: {
            latitude: data.coords.latitude,
            longitude: data.coords.longitude,
            accuracy: data.coords.accuracy,
            altitude: data.coords.altitude,
            bearing: heading
          },
          expedition: {
            id: <%= @expedition.id %>
          }
        });
      });
    }
    timer = setTimeout(locate, 1000);
  }

  $('#startLocate').on("click", function () {
    locate();
  })

  $('#stopLocate').on("click", function () {
    clearTimeout(timer);
  })

  function toggleWindow (infoWindow, map, contentMarker) {
    if (lastInfoWindow != null) {
      lastInfoWindow.close();
    }
    if (infoWindowClosed) {
      infoWindow.open(map, contentMarker);
      infoWindowClosed = false;
    } else {
      infoWindow.open(map, contentMarker);
      infoWindowClosed = true;
    }
    lastInfoWindow = infoWindow;
  }

  $('#submitTitle').on("ajax:success", function (e, data) {
    $('#title').html(data.title);
  });

  $('#submitDescription').on("ajax:success", function (e, data) {
    $('#description').html(data.description);
  });

  $('#submitImage').on("ajax:remotipartComplete", function (e, data) {
    response = JSON.parse(data.responseText);
    latLng = new google.maps.LatLng(response.coordinate.latitude, response.coordinate.longitude);
    var contentMarker = new google.maps.Marker({
      map: map,
      draggable: false,
      animation: google.maps.Animation.DROP
    });
    var infoWindow = new google.maps.InfoWindow({
      content: '<img src="' + response.annotation.image.thumb.url + '">'
    });
    contentMarker.setPosition(latLng);
    contentMarker.addListener("click", function () {
      map.panTo(contentMarker.getPosition());
      if (lastInfoWindow != null) {
        lastInfoWindow.close();
      }
      if (infoWindowClosed) {
        infoWindow.open(map, contentMarker);
        infoWindowClosed = false;
      } else {
        infoWindow.open(map, contentMarker);
        infoWindowClosed = true;
      }
      lastInfoWindow = infoWindow;
    })
  });

  $('#submitRecording').on("ajax:remotipartComplete", function (e, data) {
    response = JSON.parse(data.responseText);
    latLng = new google.maps.LatLng(response.coordinate.latitude, response.coordinate.longitude);
    var contentMarker = new google.maps.Marker({
      map: map,
      draggable: false,
      animation: google.maps.Animation.DROP
    });
    var infoWindow = new google.maps.InfoWindow({
      content: '<audio controls><source src="' + response.annotation.url + '" type="'+ response.annotation.content_type  + '"></audio>'
    });
    contentMarker.setPosition(latLng);
    contentMarker.addListener("click", function () {
      map.panTo(contentMarker.getPosition());
      if (lastInfoWindow != null) {
        lastInfoWindow.close();
      }
      if (infoWindowClosed) {
        infoWindow.open(map, contentMarker);
        infoWindowClosed = false;
      } else {
        infoWindow.open(map, contentMarker);
        infoWindowClosed = true;
      }
      lastInfoWindow = infoWindow;
    })
  });
}
</script>
